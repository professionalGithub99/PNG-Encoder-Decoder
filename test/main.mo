import HashMap "mo:base/HashMap";
import Array "mo:base/Array";
import Encoder "../src/png/Encoder";
import Iter "mo:base/Iter";
import Utils "../src/png/Utils";
import Buffer "mo:base/Buffer";
actor test{
  public func test_alpha_separation():async [[Nat8]]{
    var buffer=Buffer.Buffer<Buffer.Buffer<Nat8>>(3);
    var i1=Buffer.Buffer<Nat8>(3);
    var i2=Buffer.Buffer<Nat8>(3);
    var i3=Buffer.Buffer<Nat8>(3);
    i1.add(0);
    i1.add(0);
    i1.add(6);
    i1.add(255);
    i2.add(0);
    i2.add(0);
    i2.add(7);
    i2.add(255);
    i3.add(0);
    i3.add(0);
    i3.add(7);
    i3.add(255);
    buffer.add(i1);
    buffer.add(i2);
    buffer.add(i3);
    //Utils.hash_buffer(i3);
    var alpha_separated_buffer=Encoder.alpha_separate(buffer,3);
    return Utils.twod_buffer_to_twod_array(alpha_separated_buffer.0);
  };
  public func test_alpha_separation_not_applicable():async [[Nat8]]{
    var buffer=Buffer.Buffer<Buffer.Buffer<Nat8>>(3);
    var i1=Buffer.Buffer<Nat8>(3);
    var i2=Buffer.Buffer<Nat8>(3);
    var i3=Buffer.Buffer<Nat8>(3);
    i1.add(0);
    i1.add(0);
    i1.add(6);
    i1.add(253);
    i2.add(0);
    i2.add(0);
    i2.add(7);
    i2.add(255);
    i3.add(0);
    i3.add(0);
    i3.add(7);
    i3.add(255);
    buffer.add(i1);
    buffer.add(i2);
    buffer.add(i3);
    var alpha_separated_buffer=Encoder.alpha_separate(buffer,3);
    return Utils.twod_buffer_to_twod_array(alpha_separated_buffer.0);
  };
  public func test_indexing(): async ([Nat],[[Nat8]]){
    var buffer=Buffer.Buffer<Buffer.Buffer<Nat8>>(3);
    var i1=Buffer.Buffer<Nat8>(3);
    var i2=Buffer.Buffer<Nat8>(3);
    var i3=Buffer.Buffer<Nat8>(3);
    var i4=Buffer.Buffer<Nat8>(3);
    i1.add(0);
    i1.add(0);
    i1.add(6);
    i1.add(253);
    i2.add(0);
    i2.add(0);
    i2.add(7);
    i2.add(255);
    i3.add(0);
    i3.add(0);
    i3.add(7);
    i3.add(255);
    i4.add(0);
    i4.add(0);
    i4.add(6);
    i4.add(253);
    buffer.add(i1);
    buffer.add(i2);
    buffer.add(i3);
    buffer.add(i4);
    var hashmap_of_buffer=HashMap.HashMap<Buffer.Buffer<Nat8>,Nat>(3,Utils.buffer_eq,Utils.hash_buffer);
    var indexed=Encoder.indexing(buffer,hashmap_of_buffer);
    var hashmap_to_arr=Iter.toArray(Iter.map<Buffer.Buffer<Nat8>,[Nat8]>(indexed.1.keys(),Utils.buffer_to_array));
    return ((indexed.0).toArray(),hashmap_to_arr);
  };

  public func test_RGB_merge():async [[Nat8]]{
    var buffer=Buffer.Buffer<Buffer.Buffer<Nat8>>(3);
    var i1=Buffer.Buffer<Nat8>(3);
    var i2=Buffer.Buffer<Nat8>(3);
    var i3=Buffer.Buffer<Nat8>(3);
    i1.add(3);
    i1.add(3);
    i1.add(3);
    i1.add(253);
    i2.add(3);
    i2.add(3);
    i2.add(3);
    i2.add(255);
    i3.add(3);
    i3.add(3);
    i3.add(3);
    i3.add(255);
    buffer.add(i1);
    buffer.add(i2);
    buffer.add(i3);
    var potential_grayscale=Encoder.RGB_merge(buffer,?1);
    return Utils.twod_buffer_to_twod_array(potential_grayscale.0);
  };
  
  public func get_transparent_pixels():async ([([Nat8],Bool)],Bool,[[Nat8]]){
    var buffer=Buffer.Buffer<Buffer.Buffer<Nat8>>(3);
    var i1=Buffer.Buffer<Nat8>(3);
    var i2=Buffer.Buffer<Nat8>(3);
    var i3=Buffer.Buffer<Nat8>(3);
    var i4=Buffer.Buffer<Nat8>(3);
    var i5=Buffer.Buffer<Nat8>(3);
    i1.add(0);
    i1.add(0);
    i1.add(6);
    i1.add(0);
    i2.add(0);
    i2.add(0);
    i2.add(7);
    i2.add(255);
    i3.add(0);
    i3.add(0);
    i3.add(7);
    i3.add(255);
    i4.add(0);
    i4.add(0);
    i4.add(6);
    i4.add(223);
    i5.add(7);
    i5.add(7);
    i5.add(7);
    i5.add(0);
    buffer.add(i1);
    buffer.add(i2);
    buffer.add(i3);
    buffer.add(i4);
    buffer.add(i5);
    var hashmap_of_buffer=HashMap.HashMap<Buffer.Buffer<Nat8>,Bool>(3,Utils.buffer_eq,Utils.hash_buffer);
    var transparent_pixel_status_hashmap=Encoder.get_transparent_pixels(buffer,3,hashmap_of_buffer);
    //
    var iter_of_hashmap = hashmap_of_buffer.entries();
    //
    var modded_iter= Iter.map<(Buffer.Buffer<Nat8>,Bool),([Nat8],Bool)>(iter_of_hashmap,func (x:(Buffer.Buffer<Nat8>,Bool)):([Nat8],Bool){
      return ((x.0).toArray(),x.1);
    });
    var arr_for_alph_compact:[Nat8] = [3,4,5];
    var t =Utils.array_to_buffer<Nat8>(arr_for_alph_compact);
    var buff = Encoder.alpha_compact(buffer,3,Utils.array_to_buffer<Nat8>(arr_for_alph_compact));
    return (Iter.toArray(modded_iter),transparent_pixel_status_hashmap.1,Utils.twod_buffer_to_twod_array(buffer));
    //return Utils.twod_buffer_to_twod_array(buffer);
  };
};
